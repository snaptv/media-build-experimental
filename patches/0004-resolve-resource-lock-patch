diff --git a/linux/drivers/media/pci/ddbridge/ddbridge-core.c b/linux/drivers/media/pci/ddbridge/ddbridge-core.c
index 122062e..5fab5f2 100644
--- a/linux/drivers/media/pci/ddbridge/ddbridge-core.c
+++ b/linux/drivers/media/pci/ddbridge/ddbridge-core.c
@@ -105,6 +105,8 @@ static void ddb_redirect_dma(struct ddb *dev,
 	}
 }
 
+static void ddb_output_stop(struct ddb_output *output);
+
 static int ddb_unredirect(struct ddb_port *port)
 {
 	struct ddb_input *oredi, *iredi = 0;
@@ -114,6 +116,8 @@ static int ddb_unredirect(struct ddb_port *port)
 	mutex_lock(&redirect_lock);
 	if (port->output->dma->running) {
 		mutex_unlock(&redirect_lock);
+		pr_info("ddb_unredirect %d.%d failed\n", port->dev->nr, port->nr);
+		ddb_output_stop(port->output); // so that it woun't fail next time hopefully
 		return -EBUSY;
 	}
 	oredi = port->output->redi;
@@ -4072,14 +4076,14 @@ static ssize_t redirect_store(struct device *device,
 {
 	unsigned int i, p;
 	int res;
+	ssize_t ret = count;
 
 	if (sscanf(buf, "%x %x\n", &i, &p) != 2)
 		return -EINVAL;
 	res = ddb_redirect(i, p);
-	if (res < 0)
-		return res;
-	pr_info("redirect: %02x, %02x\n", i, p);
-	return count;
+	if (res < 0) ret = res;
+	pr_info("redirect: %02x, %02x (%d)\n", i, p, ret);
+	return ret;
 }
 
 static ssize_t gap_show(struct device *device,
